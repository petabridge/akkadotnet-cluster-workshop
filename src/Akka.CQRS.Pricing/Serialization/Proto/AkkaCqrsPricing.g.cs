// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Akka.Cqrs.Pricing.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.CQRS.Pricing.Serialization.Msgs {

  /// <summary>Holder for reflection information generated from Akka.Cqrs.Pricing.proto</summary>
  internal static partial class AkkaCqrsPricingReflection {

    #region Descriptor
    /// <summary>File descriptor for Akka.Cqrs.Pricing.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AkkaCqrsPricingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdBa2thLkNxcnMuUHJpY2luZy5wcm90bxIkQWtrYS5DUVJTLlByaWNpbmcu",
            "U2VyaWFsaXphdGlvbi5Nc2dzIkwKDFByaWNlQ2hhbmdlZBIPCgdzdG9ja0lk",
            "GAEgASgJEhcKD2N1cnJlbnRBdmdQcmljZRgCIAEoARISCgp0aW1lSXNzdWVk",
            "GAMgASgDIk4KDVZvbHVtZUNoYW5nZWQSDwoHc3RvY2tJZBgBIAEoCRIYChBj",
            "dXJyZW50QXZnVm9sdW1lGAIgASgBEhIKCnRpbWVJc3N1ZWQYAyABKAMiJgoT",
            "RmV0Y2hQcmljZUFuZFZvbHVtZRIPCgdzdG9ja0lkGAEgASgJIhcKBFBpbmcS",
            "DwoHc3RvY2tJZBgBIAEoCSK/AQoWUHJpY2VBbmRWb2x1bWVTbmFwc2hvdBIP",
            "CgdzdG9ja0lkGAEgASgJEkgKDHByaWNlVXBkYXRlcxgCIAMoCzIyLkFra2Eu",
            "Q1FSUy5QcmljaW5nLlNlcmlhbGl6YXRpb24uTXNncy5QcmljZUNoYW5nZWQS",
            "SgoNdm9sdW1lVXBkYXRlcxgDIAMoCzIzLkFra2EuQ1FSUy5QcmljaW5nLlNl",
            "cmlhbGl6YXRpb24uTXNncy5Wb2x1bWVDaGFuZ2VkItQBChdNYXRjaEFnZ3Jl",
            "Z2F0b3JTbmFwc2hvdBIQCghhdmdQcmljZRgBIAEoARIRCglhdmdWb2x1bWUY",
            "AiABKAESSAoMcHJpY2VVcGRhdGVzGAMgAygLMjIuQWtrYS5DUVJTLlByaWNp",
            "bmcuU2VyaWFsaXphdGlvbi5Nc2dzLlByaWNlQ2hhbmdlZBJKCg12b2x1bWVV",
            "cGRhdGVzGAQgAygLMjMuQWtrYS5DUVJTLlByaWNpbmcuU2VyaWFsaXphdGlv",
            "bi5Nc2dzLlZvbHVtZUNoYW5nZWRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Pricing.Serialization.Msgs.PriceChanged), global::Akka.CQRS.Pricing.Serialization.Msgs.PriceChanged.Parser, new[]{ "StockId", "CurrentAvgPrice", "TimeIssued" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Pricing.Serialization.Msgs.VolumeChanged), global::Akka.CQRS.Pricing.Serialization.Msgs.VolumeChanged.Parser, new[]{ "StockId", "CurrentAvgVolume", "TimeIssued" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Pricing.Serialization.Msgs.FetchPriceAndVolume), global::Akka.CQRS.Pricing.Serialization.Msgs.FetchPriceAndVolume.Parser, new[]{ "StockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Pricing.Serialization.Msgs.Ping), global::Akka.CQRS.Pricing.Serialization.Msgs.Ping.Parser, new[]{ "StockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Pricing.Serialization.Msgs.PriceAndVolumeSnapshot), global::Akka.CQRS.Pricing.Serialization.Msgs.PriceAndVolumeSnapshot.Parser, new[]{ "StockId", "PriceUpdates", "VolumeUpdates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Pricing.Serialization.Msgs.MatchAggregatorSnapshot), global::Akka.CQRS.Pricing.Serialization.Msgs.MatchAggregatorSnapshot.Parser, new[]{ "AvgPrice", "AvgVolume", "PriceUpdates", "VolumeUpdates" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class PriceChanged : pb::IMessage<PriceChanged> {
    private static readonly pb::MessageParser<PriceChanged> _parser = new pb::MessageParser<PriceChanged>(() => new PriceChanged());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PriceChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Pricing.Serialization.Msgs.AkkaCqrsPricingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceChanged(PriceChanged other) : this() {
      stockId_ = other.stockId_;
      currentAvgPrice_ = other.currentAvgPrice_;
      timeIssued_ = other.timeIssued_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceChanged Clone() {
      return new PriceChanged(this);
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 1;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentAvgPrice" field.</summary>
    public const int CurrentAvgPriceFieldNumber = 2;
    private double currentAvgPrice_;
    /// <summary>
    /// normally a decimal in C# - might have loss of precision here 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurrentAvgPrice {
      get { return currentAvgPrice_; }
      set {
        currentAvgPrice_ = value;
      }
    }

    /// <summary>Field number for the "timeIssued" field.</summary>
    public const int TimeIssuedFieldNumber = 3;
    private long timeIssued_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeIssued {
      get { return timeIssued_; }
      set {
        timeIssued_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PriceChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PriceChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockId != other.StockId) return false;
      if (CurrentAvgPrice != other.CurrentAvgPrice) return false;
      if (TimeIssued != other.TimeIssued) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      if (CurrentAvgPrice != 0D) hash ^= CurrentAvgPrice.GetHashCode();
      if (TimeIssued != 0L) hash ^= TimeIssued.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StockId);
      }
      if (CurrentAvgPrice != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CurrentAvgPrice);
      }
      if (TimeIssued != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimeIssued);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      if (CurrentAvgPrice != 0D) {
        size += 1 + 8;
      }
      if (TimeIssued != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeIssued);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PriceChanged other) {
      if (other == null) {
        return;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
      if (other.CurrentAvgPrice != 0D) {
        CurrentAvgPrice = other.CurrentAvgPrice;
      }
      if (other.TimeIssued != 0L) {
        TimeIssued = other.TimeIssued;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StockId = input.ReadString();
            break;
          }
          case 17: {
            CurrentAvgPrice = input.ReadDouble();
            break;
          }
          case 24: {
            TimeIssued = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class VolumeChanged : pb::IMessage<VolumeChanged> {
    private static readonly pb::MessageParser<VolumeChanged> _parser = new pb::MessageParser<VolumeChanged>(() => new VolumeChanged());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolumeChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Pricing.Serialization.Msgs.AkkaCqrsPricingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeChanged(VolumeChanged other) : this() {
      stockId_ = other.stockId_;
      currentAvgVolume_ = other.currentAvgVolume_;
      timeIssued_ = other.timeIssued_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeChanged Clone() {
      return new VolumeChanged(this);
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 1;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentAvgVolume" field.</summary>
    public const int CurrentAvgVolumeFieldNumber = 2;
    private double currentAvgVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurrentAvgVolume {
      get { return currentAvgVolume_; }
      set {
        currentAvgVolume_ = value;
      }
    }

    /// <summary>Field number for the "timeIssued" field.</summary>
    public const int TimeIssuedFieldNumber = 3;
    private long timeIssued_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeIssued {
      get { return timeIssued_; }
      set {
        timeIssued_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolumeChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolumeChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockId != other.StockId) return false;
      if (CurrentAvgVolume != other.CurrentAvgVolume) return false;
      if (TimeIssued != other.TimeIssued) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      if (CurrentAvgVolume != 0D) hash ^= CurrentAvgVolume.GetHashCode();
      if (TimeIssued != 0L) hash ^= TimeIssued.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StockId);
      }
      if (CurrentAvgVolume != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CurrentAvgVolume);
      }
      if (TimeIssued != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimeIssued);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      if (CurrentAvgVolume != 0D) {
        size += 1 + 8;
      }
      if (TimeIssued != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeIssued);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolumeChanged other) {
      if (other == null) {
        return;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
      if (other.CurrentAvgVolume != 0D) {
        CurrentAvgVolume = other.CurrentAvgVolume;
      }
      if (other.TimeIssued != 0L) {
        TimeIssued = other.TimeIssued;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StockId = input.ReadString();
            break;
          }
          case 17: {
            CurrentAvgVolume = input.ReadDouble();
            break;
          }
          case 24: {
            TimeIssued = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class FetchPriceAndVolume : pb::IMessage<FetchPriceAndVolume> {
    private static readonly pb::MessageParser<FetchPriceAndVolume> _parser = new pb::MessageParser<FetchPriceAndVolume>(() => new FetchPriceAndVolume());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FetchPriceAndVolume> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Pricing.Serialization.Msgs.AkkaCqrsPricingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchPriceAndVolume() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchPriceAndVolume(FetchPriceAndVolume other) : this() {
      stockId_ = other.stockId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchPriceAndVolume Clone() {
      return new FetchPriceAndVolume(this);
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 1;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FetchPriceAndVolume);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FetchPriceAndVolume other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockId != other.StockId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StockId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FetchPriceAndVolume other) {
      if (other == null) {
        return;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StockId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Ping : pb::IMessage<Ping> {
    private static readonly pb::MessageParser<Ping> _parser = new pb::MessageParser<Ping>(() => new Ping());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Pricing.Serialization.Msgs.AkkaCqrsPricingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping(Ping other) : this() {
      stockId_ = other.stockId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping Clone() {
      return new Ping(this);
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 1;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockId != other.StockId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StockId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ping other) {
      if (other == null) {
        return;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StockId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class PriceAndVolumeSnapshot : pb::IMessage<PriceAndVolumeSnapshot> {
    private static readonly pb::MessageParser<PriceAndVolumeSnapshot> _parser = new pb::MessageParser<PriceAndVolumeSnapshot>(() => new PriceAndVolumeSnapshot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PriceAndVolumeSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Pricing.Serialization.Msgs.AkkaCqrsPricingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceAndVolumeSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceAndVolumeSnapshot(PriceAndVolumeSnapshot other) : this() {
      stockId_ = other.stockId_;
      priceUpdates_ = other.priceUpdates_.Clone();
      volumeUpdates_ = other.volumeUpdates_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceAndVolumeSnapshot Clone() {
      return new PriceAndVolumeSnapshot(this);
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 1;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priceUpdates" field.</summary>
    public const int PriceUpdatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Akka.CQRS.Pricing.Serialization.Msgs.PriceChanged> _repeated_priceUpdates_codec
        = pb::FieldCodec.ForMessage(18, global::Akka.CQRS.Pricing.Serialization.Msgs.PriceChanged.Parser);
    private readonly pbc::RepeatedField<global::Akka.CQRS.Pricing.Serialization.Msgs.PriceChanged> priceUpdates_ = new pbc::RepeatedField<global::Akka.CQRS.Pricing.Serialization.Msgs.PriceChanged>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.CQRS.Pricing.Serialization.Msgs.PriceChanged> PriceUpdates {
      get { return priceUpdates_; }
    }

    /// <summary>Field number for the "volumeUpdates" field.</summary>
    public const int VolumeUpdatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Akka.CQRS.Pricing.Serialization.Msgs.VolumeChanged> _repeated_volumeUpdates_codec
        = pb::FieldCodec.ForMessage(26, global::Akka.CQRS.Pricing.Serialization.Msgs.VolumeChanged.Parser);
    private readonly pbc::RepeatedField<global::Akka.CQRS.Pricing.Serialization.Msgs.VolumeChanged> volumeUpdates_ = new pbc::RepeatedField<global::Akka.CQRS.Pricing.Serialization.Msgs.VolumeChanged>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.CQRS.Pricing.Serialization.Msgs.VolumeChanged> VolumeUpdates {
      get { return volumeUpdates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PriceAndVolumeSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PriceAndVolumeSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockId != other.StockId) return false;
      if(!priceUpdates_.Equals(other.priceUpdates_)) return false;
      if(!volumeUpdates_.Equals(other.volumeUpdates_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      hash ^= priceUpdates_.GetHashCode();
      hash ^= volumeUpdates_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StockId);
      }
      priceUpdates_.WriteTo(output, _repeated_priceUpdates_codec);
      volumeUpdates_.WriteTo(output, _repeated_volumeUpdates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      size += priceUpdates_.CalculateSize(_repeated_priceUpdates_codec);
      size += volumeUpdates_.CalculateSize(_repeated_volumeUpdates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PriceAndVolumeSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
      priceUpdates_.Add(other.priceUpdates_);
      volumeUpdates_.Add(other.volumeUpdates_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StockId = input.ReadString();
            break;
          }
          case 18: {
            priceUpdates_.AddEntriesFrom(input, _repeated_priceUpdates_codec);
            break;
          }
          case 26: {
            volumeUpdates_.AddEntriesFrom(input, _repeated_volumeUpdates_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class MatchAggregatorSnapshot : pb::IMessage<MatchAggregatorSnapshot> {
    private static readonly pb::MessageParser<MatchAggregatorSnapshot> _parser = new pb::MessageParser<MatchAggregatorSnapshot>(() => new MatchAggregatorSnapshot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchAggregatorSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Pricing.Serialization.Msgs.AkkaCqrsPricingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAggregatorSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAggregatorSnapshot(MatchAggregatorSnapshot other) : this() {
      avgPrice_ = other.avgPrice_;
      avgVolume_ = other.avgVolume_;
      priceUpdates_ = other.priceUpdates_.Clone();
      volumeUpdates_ = other.volumeUpdates_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAggregatorSnapshot Clone() {
      return new MatchAggregatorSnapshot(this);
    }

    /// <summary>Field number for the "avgPrice" field.</summary>
    public const int AvgPriceFieldNumber = 1;
    private double avgPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvgPrice {
      get { return avgPrice_; }
      set {
        avgPrice_ = value;
      }
    }

    /// <summary>Field number for the "avgVolume" field.</summary>
    public const int AvgVolumeFieldNumber = 2;
    private double avgVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvgVolume {
      get { return avgVolume_; }
      set {
        avgVolume_ = value;
      }
    }

    /// <summary>Field number for the "priceUpdates" field.</summary>
    public const int PriceUpdatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Akka.CQRS.Pricing.Serialization.Msgs.PriceChanged> _repeated_priceUpdates_codec
        = pb::FieldCodec.ForMessage(26, global::Akka.CQRS.Pricing.Serialization.Msgs.PriceChanged.Parser);
    private readonly pbc::RepeatedField<global::Akka.CQRS.Pricing.Serialization.Msgs.PriceChanged> priceUpdates_ = new pbc::RepeatedField<global::Akka.CQRS.Pricing.Serialization.Msgs.PriceChanged>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.CQRS.Pricing.Serialization.Msgs.PriceChanged> PriceUpdates {
      get { return priceUpdates_; }
    }

    /// <summary>Field number for the "volumeUpdates" field.</summary>
    public const int VolumeUpdatesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Akka.CQRS.Pricing.Serialization.Msgs.VolumeChanged> _repeated_volumeUpdates_codec
        = pb::FieldCodec.ForMessage(34, global::Akka.CQRS.Pricing.Serialization.Msgs.VolumeChanged.Parser);
    private readonly pbc::RepeatedField<global::Akka.CQRS.Pricing.Serialization.Msgs.VolumeChanged> volumeUpdates_ = new pbc::RepeatedField<global::Akka.CQRS.Pricing.Serialization.Msgs.VolumeChanged>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.CQRS.Pricing.Serialization.Msgs.VolumeChanged> VolumeUpdates {
      get { return volumeUpdates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchAggregatorSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchAggregatorSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AvgPrice != other.AvgPrice) return false;
      if (AvgVolume != other.AvgVolume) return false;
      if(!priceUpdates_.Equals(other.priceUpdates_)) return false;
      if(!volumeUpdates_.Equals(other.volumeUpdates_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AvgPrice != 0D) hash ^= AvgPrice.GetHashCode();
      if (AvgVolume != 0D) hash ^= AvgVolume.GetHashCode();
      hash ^= priceUpdates_.GetHashCode();
      hash ^= volumeUpdates_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AvgPrice != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(AvgPrice);
      }
      if (AvgVolume != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AvgVolume);
      }
      priceUpdates_.WriteTo(output, _repeated_priceUpdates_codec);
      volumeUpdates_.WriteTo(output, _repeated_volumeUpdates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AvgPrice != 0D) {
        size += 1 + 8;
      }
      if (AvgVolume != 0D) {
        size += 1 + 8;
      }
      size += priceUpdates_.CalculateSize(_repeated_priceUpdates_codec);
      size += volumeUpdates_.CalculateSize(_repeated_volumeUpdates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchAggregatorSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.AvgPrice != 0D) {
        AvgPrice = other.AvgPrice;
      }
      if (other.AvgVolume != 0D) {
        AvgVolume = other.AvgVolume;
      }
      priceUpdates_.Add(other.priceUpdates_);
      volumeUpdates_.Add(other.volumeUpdates_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            AvgPrice = input.ReadDouble();
            break;
          }
          case 17: {
            AvgVolume = input.ReadDouble();
            break;
          }
          case 26: {
            priceUpdates_.AddEntriesFrom(input, _repeated_priceUpdates_codec);
            break;
          }
          case 34: {
            volumeUpdates_.AddEntriesFrom(input, _repeated_volumeUpdates_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
