// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Akka.Cqrs.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.CQRS.Serialization.Msgs {

  /// <summary>Holder for reflection information generated from Akka.Cqrs.proto</summary>
  internal static partial class AkkaCqrsReflection {

    #region Descriptor
    /// <summary>File descriptor for Akka.Cqrs.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AkkaCqrsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9Ba2thLkNxcnMucHJvdG8SHEFra2EuQ1FSUy5TZXJpYWxpemF0aW9uLk1z",
            "Z3MiXAoDQmlkEg8KB29yZGVySWQYASABKAkSDwoHc3RvY2tJZBgCIAEoCRIQ",
            "CghxdWFudGl0eRgDIAEoARINCgVwcmljZRgEIAEoARISCgp0aW1lSXNzdWVk",
            "GAUgASgDIlwKA0FzaxIPCgdvcmRlcklkGAEgASgJEg8KB3N0b2NrSWQYAiAB",
            "KAkSEAoIcXVhbnRpdHkYAyABKAESDQoFcHJpY2UYBCABKAESEgoKdGltZUlz",
            "c3VlZBgFIAEoAyKGAQoERmlsbBIPCgdvcmRlcklkGAEgASgJEg8KB3N0b2Nr",
            "SWQYAiABKAkSEAoIcXVhbnRpdHkYAyABKAESDQoFcHJpY2UYBCABKAESEgoK",
            "dGltZUlzc3VlZBgFIAEoAxISCgpmaWxsZWRCeUlkGAYgASgJEhMKC3BhcnRp",
            "YWxGaWxsGAcgASgIInYKBU1hdGNoEg8KB3N0b2NrSWQYASABKAkSEgoKYnV5",
            "T3JkZXJJZBgCIAEoCRITCgtzZWxsT3JkZXJJZBgDIAEoCRIQCghxdWFudGl0",
            "eRgEIAEoARINCgVwcmljZRgFIAEoARISCgp0aW1lSXNzdWVkGAYgASgDIsgB",
            "CgVPcmRlchIPCgdvcmRlcklkGAEgASgJEg8KB3N0b2NrSWQYAiABKAkSNQoE",
            "c2lkZRgDIAEoDjInLkFra2EuQ1FSUy5TZXJpYWxpemF0aW9uLk1zZ3MuVHJh",
            "ZGVTaWRlEhAKCHF1YW50aXR5GAQgASgBEg0KBXByaWNlGAUgASgBEhIKCnRp",
            "bWVJc3N1ZWQYBiABKAMSMQoFZmlsbHMYECADKAsyIi5Ba2thLkNRUlMuU2Vy",
            "aWFsaXphdGlvbi5Nc2dzLkZpbGwiyAEKEU9yZGVyYm9va1NuYXBzaG90Eg8K",
            "B3N0b2NrSWQYASABKAkSEgoKdGltZUlzc3VlZBgCIAEoAxITCgthc2tRdWFu",
            "dGl0eRgDIAEoARITCgtiaWRRdWFudGl0eRgEIAEoARIxCgRhc2tzGAUgAygL",
            "MiMuQWtrYS5DUVJTLlNlcmlhbGl6YXRpb24uTXNncy5PcmRlchIxCgRiaWRz",
            "GAYgAygLMiMuQWtrYS5DUVJTLlNlcmlhbGl6YXRpb24uTXNncy5PcmRlciIn",
            "ChRHZXRPcmRlcmJvb2tTbmFwc2hvdBIPCgdzdG9ja0lkGAEgASgJIiMKEEdl",
            "dFJlY2VudE1hdGNoZXMSDwoHc3RvY2tJZBgBIAEoCSozCgpUcmFkZUV2ZW50",
            "EgcKA0JJRBAAEgcKA0FTSxABEggKBEZJTEwQAhIJCgVNQVRDSBADKh4KCVRy",
            "YWRlU2lkZRIHCgNCVVkQABIICgRTRUxMEAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Akka.CQRS.Serialization.Msgs.TradeEvent), typeof(global::Akka.CQRS.Serialization.Msgs.TradeSide), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Serialization.Msgs.Bid), global::Akka.CQRS.Serialization.Msgs.Bid.Parser, new[]{ "OrderId", "StockId", "Quantity", "Price", "TimeIssued" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Serialization.Msgs.Ask), global::Akka.CQRS.Serialization.Msgs.Ask.Parser, new[]{ "OrderId", "StockId", "Quantity", "Price", "TimeIssued" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Serialization.Msgs.Fill), global::Akka.CQRS.Serialization.Msgs.Fill.Parser, new[]{ "OrderId", "StockId", "Quantity", "Price", "TimeIssued", "FilledById", "PartialFill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Serialization.Msgs.Match), global::Akka.CQRS.Serialization.Msgs.Match.Parser, new[]{ "StockId", "BuyOrderId", "SellOrderId", "Quantity", "Price", "TimeIssued" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Serialization.Msgs.Order), global::Akka.CQRS.Serialization.Msgs.Order.Parser, new[]{ "OrderId", "StockId", "Side", "Quantity", "Price", "TimeIssued", "Fills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Serialization.Msgs.OrderbookSnapshot), global::Akka.CQRS.Serialization.Msgs.OrderbookSnapshot.Parser, new[]{ "StockId", "TimeIssued", "AskQuantity", "BidQuantity", "Asks", "Bids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Serialization.Msgs.GetOrderbookSnapshot), global::Akka.CQRS.Serialization.Msgs.GetOrderbookSnapshot.Parser, new[]{ "StockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.CQRS.Serialization.Msgs.GetRecentMatches), global::Akka.CQRS.Serialization.Msgs.GetRecentMatches.Parser, new[]{ "StockId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum TradeEvent {
    [pbr::OriginalName("BID")] Bid = 0,
    [pbr::OriginalName("ASK")] Ask = 1,
    [pbr::OriginalName("FILL")] Fill = 2,
    [pbr::OriginalName("MATCH")] Match = 3,
  }

  /// <summary>
  /// used in Order structs 
  /// </summary>
  internal enum TradeSide {
    [pbr::OriginalName("BUY")] Buy = 0,
    [pbr::OriginalName("SELL")] Sell = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Trading events 
  /// </summary>
  internal sealed partial class Bid : pb::IMessage<Bid> {
    private static readonly pb::MessageParser<Bid> _parser = new pb::MessageParser<Bid>(() => new Bid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Serialization.Msgs.AkkaCqrsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bid(Bid other) : this() {
      orderId_ = other.orderId_;
      stockId_ = other.stockId_;
      quantity_ = other.quantity_;
      price_ = other.price_;
      timeIssued_ = other.timeIssued_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bid Clone() {
      return new Bid(this);
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private string orderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 2;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 3;
    private double quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private double price_;
    /// <summary>
    /// normally a decimal in C# - might have loss of precision here 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "timeIssued" field.</summary>
    public const int TimeIssuedFieldNumber = 5;
    private long timeIssued_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeIssued {
      get { return timeIssued_; }
      set {
        timeIssued_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (StockId != other.StockId) return false;
      if (Quantity != other.Quantity) return false;
      if (Price != other.Price) return false;
      if (TimeIssued != other.TimeIssued) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      if (Quantity != 0D) hash ^= Quantity.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (TimeIssued != 0L) hash ^= TimeIssued.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (StockId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StockId);
      }
      if (Quantity != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Quantity);
      }
      if (Price != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Price);
      }
      if (TimeIssued != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeIssued);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      if (Quantity != 0D) {
        size += 1 + 8;
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (TimeIssued != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeIssued);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bid other) {
      if (other == null) {
        return;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
      if (other.Quantity != 0D) {
        Quantity = other.Quantity;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.TimeIssued != 0L) {
        TimeIssued = other.TimeIssued;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 18: {
            StockId = input.ReadString();
            break;
          }
          case 25: {
            Quantity = input.ReadDouble();
            break;
          }
          case 33: {
            Price = input.ReadDouble();
            break;
          }
          case 40: {
            TimeIssued = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Ask : pb::IMessage<Ask> {
    private static readonly pb::MessageParser<Ask> _parser = new pb::MessageParser<Ask>(() => new Ask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Serialization.Msgs.AkkaCqrsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ask(Ask other) : this() {
      orderId_ = other.orderId_;
      stockId_ = other.stockId_;
      quantity_ = other.quantity_;
      price_ = other.price_;
      timeIssued_ = other.timeIssued_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ask Clone() {
      return new Ask(this);
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private string orderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 2;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 3;
    private double quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private double price_;
    /// <summary>
    /// normally a decimal in C# - might have loss of precision here 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "timeIssued" field.</summary>
    public const int TimeIssuedFieldNumber = 5;
    private long timeIssued_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeIssued {
      get { return timeIssued_; }
      set {
        timeIssued_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (StockId != other.StockId) return false;
      if (Quantity != other.Quantity) return false;
      if (Price != other.Price) return false;
      if (TimeIssued != other.TimeIssued) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      if (Quantity != 0D) hash ^= Quantity.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (TimeIssued != 0L) hash ^= TimeIssued.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (StockId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StockId);
      }
      if (Quantity != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Quantity);
      }
      if (Price != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Price);
      }
      if (TimeIssued != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeIssued);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      if (Quantity != 0D) {
        size += 1 + 8;
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (TimeIssued != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeIssued);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ask other) {
      if (other == null) {
        return;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
      if (other.Quantity != 0D) {
        Quantity = other.Quantity;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.TimeIssued != 0L) {
        TimeIssued = other.TimeIssued;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 18: {
            StockId = input.ReadString();
            break;
          }
          case 25: {
            Quantity = input.ReadDouble();
            break;
          }
          case 33: {
            Price = input.ReadDouble();
            break;
          }
          case 40: {
            TimeIssued = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Fill : pb::IMessage<Fill> {
    private static readonly pb::MessageParser<Fill> _parser = new pb::MessageParser<Fill>(() => new Fill());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Fill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Serialization.Msgs.AkkaCqrsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fill(Fill other) : this() {
      orderId_ = other.orderId_;
      stockId_ = other.stockId_;
      quantity_ = other.quantity_;
      price_ = other.price_;
      timeIssued_ = other.timeIssued_;
      filledById_ = other.filledById_;
      partialFill_ = other.partialFill_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fill Clone() {
      return new Fill(this);
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private string orderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 2;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 3;
    private double quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private double price_;
    /// <summary>
    /// normally a decimal in C# - might have loss of precision here 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "timeIssued" field.</summary>
    public const int TimeIssuedFieldNumber = 5;
    private long timeIssued_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeIssued {
      get { return timeIssued_; }
      set {
        timeIssued_ = value;
      }
    }

    /// <summary>Field number for the "filledById" field.</summary>
    public const int FilledByIdFieldNumber = 6;
    private string filledById_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilledById {
      get { return filledById_; }
      set {
        filledById_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "partialFill" field.</summary>
    public const int PartialFillFieldNumber = 7;
    private bool partialFill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PartialFill {
      get { return partialFill_; }
      set {
        partialFill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Fill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Fill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (StockId != other.StockId) return false;
      if (Quantity != other.Quantity) return false;
      if (Price != other.Price) return false;
      if (TimeIssued != other.TimeIssued) return false;
      if (FilledById != other.FilledById) return false;
      if (PartialFill != other.PartialFill) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      if (Quantity != 0D) hash ^= Quantity.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (TimeIssued != 0L) hash ^= TimeIssued.GetHashCode();
      if (FilledById.Length != 0) hash ^= FilledById.GetHashCode();
      if (PartialFill != false) hash ^= PartialFill.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (StockId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StockId);
      }
      if (Quantity != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Quantity);
      }
      if (Price != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Price);
      }
      if (TimeIssued != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeIssued);
      }
      if (FilledById.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FilledById);
      }
      if (PartialFill != false) {
        output.WriteRawTag(56);
        output.WriteBool(PartialFill);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      if (Quantity != 0D) {
        size += 1 + 8;
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (TimeIssued != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeIssued);
      }
      if (FilledById.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilledById);
      }
      if (PartialFill != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Fill other) {
      if (other == null) {
        return;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
      if (other.Quantity != 0D) {
        Quantity = other.Quantity;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.TimeIssued != 0L) {
        TimeIssued = other.TimeIssued;
      }
      if (other.FilledById.Length != 0) {
        FilledById = other.FilledById;
      }
      if (other.PartialFill != false) {
        PartialFill = other.PartialFill;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 18: {
            StockId = input.ReadString();
            break;
          }
          case 25: {
            Quantity = input.ReadDouble();
            break;
          }
          case 33: {
            Price = input.ReadDouble();
            break;
          }
          case 40: {
            TimeIssued = input.ReadInt64();
            break;
          }
          case 50: {
            FilledById = input.ReadString();
            break;
          }
          case 56: {
            PartialFill = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Match : pb::IMessage<Match> {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Serialization.Msgs.AkkaCqrsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      stockId_ = other.stockId_;
      buyOrderId_ = other.buyOrderId_;
      sellOrderId_ = other.sellOrderId_;
      quantity_ = other.quantity_;
      price_ = other.price_;
      timeIssued_ = other.timeIssued_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 1;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buyOrderId" field.</summary>
    public const int BuyOrderIdFieldNumber = 2;
    private string buyOrderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuyOrderId {
      get { return buyOrderId_; }
      set {
        buyOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sellOrderId" field.</summary>
    public const int SellOrderIdFieldNumber = 3;
    private string sellOrderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellOrderId {
      get { return sellOrderId_; }
      set {
        sellOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private double quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 5;
    private double price_;
    /// <summary>
    /// normally a decimal in C# - might have loss of precision here 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "timeIssued" field.</summary>
    public const int TimeIssuedFieldNumber = 6;
    private long timeIssued_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeIssued {
      get { return timeIssued_; }
      set {
        timeIssued_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockId != other.StockId) return false;
      if (BuyOrderId != other.BuyOrderId) return false;
      if (SellOrderId != other.SellOrderId) return false;
      if (Quantity != other.Quantity) return false;
      if (Price != other.Price) return false;
      if (TimeIssued != other.TimeIssued) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      if (BuyOrderId.Length != 0) hash ^= BuyOrderId.GetHashCode();
      if (SellOrderId.Length != 0) hash ^= SellOrderId.GetHashCode();
      if (Quantity != 0D) hash ^= Quantity.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (TimeIssued != 0L) hash ^= TimeIssued.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StockId);
      }
      if (BuyOrderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BuyOrderId);
      }
      if (SellOrderId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SellOrderId);
      }
      if (Quantity != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Quantity);
      }
      if (Price != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Price);
      }
      if (TimeIssued != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TimeIssued);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      if (BuyOrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuyOrderId);
      }
      if (SellOrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellOrderId);
      }
      if (Quantity != 0D) {
        size += 1 + 8;
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (TimeIssued != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeIssued);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
      if (other.BuyOrderId.Length != 0) {
        BuyOrderId = other.BuyOrderId;
      }
      if (other.SellOrderId.Length != 0) {
        SellOrderId = other.SellOrderId;
      }
      if (other.Quantity != 0D) {
        Quantity = other.Quantity;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.TimeIssued != 0L) {
        TimeIssued = other.TimeIssued;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StockId = input.ReadString();
            break;
          }
          case 18: {
            BuyOrderId = input.ReadString();
            break;
          }
          case 26: {
            SellOrderId = input.ReadString();
            break;
          }
          case 33: {
            Quantity = input.ReadDouble();
            break;
          }
          case 41: {
            Price = input.ReadDouble();
            break;
          }
          case 48: {
            TimeIssued = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Order : pb::IMessage<Order> {
    private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Serialization.Msgs.AkkaCqrsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order(Order other) : this() {
      orderId_ = other.orderId_;
      stockId_ = other.stockId_;
      side_ = other.side_;
      quantity_ = other.quantity_;
      price_ = other.price_;
      timeIssued_ = other.timeIssued_;
      fills_ = other.fills_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order Clone() {
      return new Order(this);
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private string orderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 2;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 3;
    private global::Akka.CQRS.Serialization.Msgs.TradeSide side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.CQRS.Serialization.Msgs.TradeSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private double quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 5;
    private double price_;
    /// <summary>
    /// normally a decimal in C# - might have loss of precision here 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "timeIssued" field.</summary>
    public const int TimeIssuedFieldNumber = 6;
    private long timeIssued_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeIssued {
      get { return timeIssued_; }
      set {
        timeIssued_ = value;
      }
    }

    /// <summary>Field number for the "fills" field.</summary>
    public const int FillsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Akka.CQRS.Serialization.Msgs.Fill> _repeated_fills_codec
        = pb::FieldCodec.ForMessage(130, global::Akka.CQRS.Serialization.Msgs.Fill.Parser);
    private readonly pbc::RepeatedField<global::Akka.CQRS.Serialization.Msgs.Fill> fills_ = new pbc::RepeatedField<global::Akka.CQRS.Serialization.Msgs.Fill>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.CQRS.Serialization.Msgs.Fill> Fills {
      get { return fills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (StockId != other.StockId) return false;
      if (Side != other.Side) return false;
      if (Quantity != other.Quantity) return false;
      if (Price != other.Price) return false;
      if (TimeIssued != other.TimeIssued) return false;
      if(!fills_.Equals(other.fills_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (Quantity != 0D) hash ^= Quantity.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (TimeIssued != 0L) hash ^= TimeIssued.GetHashCode();
      hash ^= fills_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (StockId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StockId);
      }
      if (Side != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Side);
      }
      if (Quantity != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Quantity);
      }
      if (Price != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Price);
      }
      if (TimeIssued != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TimeIssued);
      }
      fills_.WriteTo(output, _repeated_fills_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Quantity != 0D) {
        size += 1 + 8;
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (TimeIssued != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeIssued);
      }
      size += fills_.CalculateSize(_repeated_fills_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Order other) {
      if (other == null) {
        return;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.Quantity != 0D) {
        Quantity = other.Quantity;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.TimeIssued != 0L) {
        TimeIssued = other.TimeIssued;
      }
      fills_.Add(other.fills_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 18: {
            StockId = input.ReadString();
            break;
          }
          case 24: {
            side_ = (global::Akka.CQRS.Serialization.Msgs.TradeSide) input.ReadEnum();
            break;
          }
          case 33: {
            Quantity = input.ReadDouble();
            break;
          }
          case 41: {
            Price = input.ReadDouble();
            break;
          }
          case 48: {
            TimeIssued = input.ReadInt64();
            break;
          }
          case 130: {
            fills_.AddEntriesFrom(input, _repeated_fills_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class OrderbookSnapshot : pb::IMessage<OrderbookSnapshot> {
    private static readonly pb::MessageParser<OrderbookSnapshot> _parser = new pb::MessageParser<OrderbookSnapshot>(() => new OrderbookSnapshot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderbookSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Serialization.Msgs.AkkaCqrsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderbookSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderbookSnapshot(OrderbookSnapshot other) : this() {
      stockId_ = other.stockId_;
      timeIssued_ = other.timeIssued_;
      askQuantity_ = other.askQuantity_;
      bidQuantity_ = other.bidQuantity_;
      asks_ = other.asks_.Clone();
      bids_ = other.bids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderbookSnapshot Clone() {
      return new OrderbookSnapshot(this);
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 1;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeIssued" field.</summary>
    public const int TimeIssuedFieldNumber = 2;
    private long timeIssued_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeIssued {
      get { return timeIssued_; }
      set {
        timeIssued_ = value;
      }
    }

    /// <summary>Field number for the "askQuantity" field.</summary>
    public const int AskQuantityFieldNumber = 3;
    private double askQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AskQuantity {
      get { return askQuantity_; }
      set {
        askQuantity_ = value;
      }
    }

    /// <summary>Field number for the "bidQuantity" field.</summary>
    public const int BidQuantityFieldNumber = 4;
    private double bidQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BidQuantity {
      get { return bidQuantity_; }
      set {
        bidQuantity_ = value;
      }
    }

    /// <summary>Field number for the "asks" field.</summary>
    public const int AsksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Akka.CQRS.Serialization.Msgs.Order> _repeated_asks_codec
        = pb::FieldCodec.ForMessage(42, global::Akka.CQRS.Serialization.Msgs.Order.Parser);
    private readonly pbc::RepeatedField<global::Akka.CQRS.Serialization.Msgs.Order> asks_ = new pbc::RepeatedField<global::Akka.CQRS.Serialization.Msgs.Order>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.CQRS.Serialization.Msgs.Order> Asks {
      get { return asks_; }
    }

    /// <summary>Field number for the "bids" field.</summary>
    public const int BidsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Akka.CQRS.Serialization.Msgs.Order> _repeated_bids_codec
        = pb::FieldCodec.ForMessage(50, global::Akka.CQRS.Serialization.Msgs.Order.Parser);
    private readonly pbc::RepeatedField<global::Akka.CQRS.Serialization.Msgs.Order> bids_ = new pbc::RepeatedField<global::Akka.CQRS.Serialization.Msgs.Order>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.CQRS.Serialization.Msgs.Order> Bids {
      get { return bids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderbookSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderbookSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockId != other.StockId) return false;
      if (TimeIssued != other.TimeIssued) return false;
      if (AskQuantity != other.AskQuantity) return false;
      if (BidQuantity != other.BidQuantity) return false;
      if(!asks_.Equals(other.asks_)) return false;
      if(!bids_.Equals(other.bids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      if (TimeIssued != 0L) hash ^= TimeIssued.GetHashCode();
      if (AskQuantity != 0D) hash ^= AskQuantity.GetHashCode();
      if (BidQuantity != 0D) hash ^= BidQuantity.GetHashCode();
      hash ^= asks_.GetHashCode();
      hash ^= bids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StockId);
      }
      if (TimeIssued != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimeIssued);
      }
      if (AskQuantity != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AskQuantity);
      }
      if (BidQuantity != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(BidQuantity);
      }
      asks_.WriteTo(output, _repeated_asks_codec);
      bids_.WriteTo(output, _repeated_bids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      if (TimeIssued != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeIssued);
      }
      if (AskQuantity != 0D) {
        size += 1 + 8;
      }
      if (BidQuantity != 0D) {
        size += 1 + 8;
      }
      size += asks_.CalculateSize(_repeated_asks_codec);
      size += bids_.CalculateSize(_repeated_bids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderbookSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
      if (other.TimeIssued != 0L) {
        TimeIssued = other.TimeIssued;
      }
      if (other.AskQuantity != 0D) {
        AskQuantity = other.AskQuantity;
      }
      if (other.BidQuantity != 0D) {
        BidQuantity = other.BidQuantity;
      }
      asks_.Add(other.asks_);
      bids_.Add(other.bids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StockId = input.ReadString();
            break;
          }
          case 16: {
            TimeIssued = input.ReadInt64();
            break;
          }
          case 25: {
            AskQuantity = input.ReadDouble();
            break;
          }
          case 33: {
            BidQuantity = input.ReadDouble();
            break;
          }
          case 42: {
            asks_.AddEntriesFrom(input, _repeated_asks_codec);
            break;
          }
          case 50: {
            bids_.AddEntriesFrom(input, _repeated_bids_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetOrderbookSnapshot : pb::IMessage<GetOrderbookSnapshot> {
    private static readonly pb::MessageParser<GetOrderbookSnapshot> _parser = new pb::MessageParser<GetOrderbookSnapshot>(() => new GetOrderbookSnapshot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOrderbookSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Serialization.Msgs.AkkaCqrsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOrderbookSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOrderbookSnapshot(GetOrderbookSnapshot other) : this() {
      stockId_ = other.stockId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOrderbookSnapshot Clone() {
      return new GetOrderbookSnapshot(this);
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 1;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOrderbookSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOrderbookSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockId != other.StockId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StockId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOrderbookSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StockId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetRecentMatches : pb::IMessage<GetRecentMatches> {
    private static readonly pb::MessageParser<GetRecentMatches> _parser = new pb::MessageParser<GetRecentMatches>(() => new GetRecentMatches());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRecentMatches> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.CQRS.Serialization.Msgs.AkkaCqrsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecentMatches() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecentMatches(GetRecentMatches other) : this() {
      stockId_ = other.stockId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecentMatches Clone() {
      return new GetRecentMatches(this);
    }

    /// <summary>Field number for the "stockId" field.</summary>
    public const int StockIdFieldNumber = 1;
    private string stockId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockId {
      get { return stockId_; }
      set {
        stockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRecentMatches);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRecentMatches other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockId != other.StockId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockId.Length != 0) hash ^= StockId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StockId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRecentMatches other) {
      if (other == null) {
        return;
      }
      if (other.StockId.Length != 0) {
        StockId = other.StockId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StockId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
